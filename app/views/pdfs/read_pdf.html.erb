<h4 class="">Read PDF</h4>

<button class="btn btn-sm mr-2"> <%= link_to "Home", pdfs_path %> </button> |
<button onclick="prevPage()" class="btn btn-sm mr-2"> Prev </button> |
<button onclick="nextPage()" class="btn btn-sm mr-2"> Next </button> |
<button class="btn btn-sm mr-2"> <%= link_to 'Refresh', read_pdf_pdf_path(@pdf) %> </button> |
<form action="<%= read_pdf_pdf_path(@pdf) %>" method="get" id="jumppage">
  <input type="number" name="newpage" value="<%= @pdf.current_page %>" />
  <button class="btn btn-default btn-success btn-sm" type="submit">Jump To Page</button>
</form>

<div class="row p-2">
  <div class="col-md-12" id="pdfManager" style="">
    <div class="row" id="selectorContainer">
      <div class="col-fixed-605">
        <div id="pageContainer" class="pdfViewer singlePageView dropzone nopadding"
             style="background-color:transparent">
          <canvas id="the-canvas" style=""></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Below the pdf base 64 rapresentation -->
<input id="pdfBase64" type="hidden" value="<%= @pdf_attachment %>">
<input id="pdfId" type="hidden" value="<%= @pdf.id %>">
<input id="currentPage" type="hidden" value="<%= @pdf.current_page %>">

<script>
    var pdfSection = $('#pdfBase64')
    var currentPage = parseInt($('#currentPage').val())

    if(pdfSection.length > 0 ) {
        var pdfData = atob(pdfSection.val());
        var universalPageCounter = currentPage;

        pdfjsLib.GlobalWorkerOptions.workerSrc =
            'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.0.943/pdf.worker.min.js';

        var loadingTask = pdfjsLib.getDocument({data: pdfData});
        loadingTask.promise.then(function (pdf) {
            pdf.getPage(currentPage).then(function (page) {
                var scale = 1.0;
                var viewport = page.getViewport(scale);
                var canvas = document.getElementById('the-canvas');
                var context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                page.render(renderContext).then(function () {
                    $(document).trigger("pagerendered");
                    return page.getTextContent();
                }, function () {
                    alert('Error loading pdf. Try again or contact support')
                })
            })
        })

        function nextPage(){
            var loadingTask = pdfjsLib.getDocument({data: pdfData});
            loadingTask.promise.then(function (pdf) {
                if (universalPageCounter < pdf.numPages) {
                    universalPageCounter += 1;
                    pdf.getPage(universalPageCounter).then(function (page) {
                        loadPage(page)
                    });
                    savePage(false);
                }
            });
        }

        function prevPage(){
            var loadingTask = pdfjsLib.getDocument({data: pdfData});
            loadingTask.promise.then(function (pdf) {
                if (universalPageCounter > 1) {
                    universalPageCounter -= 1;
                    pdf.getPage(universalPageCounter).then(function (page) {
                        loadPage(page)
                    });
                    savePage(false)
                }
            });
        }

        function loadPage(page) {
            var scale = 1.0;
            var viewport = page.getViewport(scale);
            var canvas = document.getElementById('the-canvas');
            var context = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            var renderContext = {
                canvasContext: context,
                viewport: viewport
            };
            page.render(renderContext).then(function () {
                $(document).trigger("pagerendered");
                return page.getTextContent();
            }, function () {
                // console.log("ERROR");
                alert('Error opening new page. Try again or contact support')
            });
        }

        function jump_to_page() {
            const form = document.getElementById('jumppage');
            var new_page = 1;
            form.addEventListener('submit', (event)=>{
                new_page = form.elements['newpage'];
                new_page = Math.abs(new_page)
            })

            console.log('new',new_page)
            if(new_page === undefined || new_page === null) return;

            var loadingTask = pdfjsLib.getDocument({data: pdfData});
            loadingTask.promise.then(function (pdf) {
                if (new_page < pdf.numPages) {
                    universalPageCounter = new_page
                    pdf.getPage(universalPageCounter).then(function (page) {
                        loadPage(page)
                    });

                    var pdf_id = $('#pdfId').val();
                    $.ajax({
                        url: '/pdfs/jump_to_page',
                        type: 'PUT',
                        data: {
                            authenticity_token: $('[name="csrf-token"]')[0].content,
                            new_page: new_page,
                            pdf_id: pdf_id
                        },
                        success: function () {
                            showFeedback(true);
                            if (reload === true) location.reload();
                        }
                    }).fail(function (response) {
                        showFeedback(false);
                        alert("Failed to save, please try again or contact the administrator");
                    });
                } else {
                    showAlert('Page exceeds total number', 'error')
                }
            });
        }

        function savePage(reload) {
            var pdf_id = $('#pdfId').val();
            $.ajax({
                url: '/pdfs/save_page',
                type: 'PUT',
                data: {
                    authenticity_token: $('[name="csrf-token"]')[0].content,
                    page: universalPageCounter,
                    pdf_id: pdf_id
                },
                success: function () {
                    showFeedback(true);
                    if (reload === true) location.reload();
                }
            }).fail(function (response) {
                showFeedback(false);
                alert("Failed to save, please try again or contact the administrator");
            });
        }

        function showFeedback(value) {
            var icon = value ? 'success' : 'error';
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            })

            Toast.fire({
                icon: icon,
                width: 100
            })
        }

    }
</script>








